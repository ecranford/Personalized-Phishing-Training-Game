;;Load packages
(ql:quickload '(:usocket
		:cl-json))

(defparameter +host+ "127.0.0.1")
(defconstant +default-port+ 9143)

;;select-users will return a list of users to send phishing emails to (default: 20% budget)
(defun select-users (trial user-history)
  (let ((user-ids '()))
    (cond ((<= 20 trial 79)
	   (let ((+socket+ (usocket:socket-connect +host+ +default-port+)))
	     (unwind-protect
		  (let ((+stream+ (usocket:socket-stream +socket+)))
		    (format t ";; request: ~S~%" user-history)
		    (setf user-history (json:encode-json-alist-to-string user-history))
		    (format t ";; sending: ~S~%" user-history)
		    (format +stream+ "~A~%" user-history)
		    ;;(force-output +stream+)
		    (finish-output +stream+)
		    (setf user-ids (read-line +stream+))
		    (format t ";; received: ~A~%" user-ids)
		    (setf user-ids (mapcar (lambda (x) (read-from-string (json:camel-case-to-lisp x)))
					   (json:decode-json-from-string user-ids)))
		    (format t ";; decoded response: ~S~%" user-ids)
		    )
	       (usocket:socket-close +socket+)
	       )
	     )
	   )
	  (t ;;select 2 random users
	   (dotimes (i 2)
	     (push (nth (random (length user-history)) (mapcar #'car user-history)) user-ids)))
	  )
    user-ids)
  )

(defun run-task (trials)
  (let ((user-history '()))
    (dotimes (i 10)
      (setf user-history (acons (intern (format nil "USER-~A" i))
				`((,(random 20) . ((CLASS . ,(nth (random 1) '(phishing ham)))
						   (TIME . ,(random 100.0)))))
				user-history)))
    (dotimes (i trials)
      (let ((selected-users (select-users i user-history)))
	(dolist (user (mapcar #'car user-history))
	  (setf (cdr (assoc user user-history)) (acons (random 20)
						       `((CLASS . ,(if (member user selected-users)
								       'phishing
								       'ham))
							 (TIME . ,(+ (* 100 (1+ i)) (random 100.0))))
						       (cdr (assoc user user-history)))))))
    )
  )
